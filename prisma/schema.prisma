// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String?
  email         String    @unique
  password      String?
  emailVerified DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts            Account[]
  sessions            Session[]
  verificationOTPs    VerificationOTP[]
  resetPasswordTokens ResetPasswordToken[]
  failedLoginAttempts FailedLoginAttempt[]
  resumes             Resume[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationOTP {
  id        String   @id @default(cuid())
  userId    String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  reason    String   @default("resend")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([otp])
  @@map("verification_otps")
}

model ResetPasswordToken {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@map("reset_password_tokens")
}

model MagicLink {
  id         String   @id @default(cuid())
  identifier String   @unique
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@index([token, identifier])
  @@map("magic_links")
}

model FailedLoginAttempt {
  id        String   @id @default(cuid())
  userId    String
  ipAddress String
  attemptAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("failed_login_attempts")
}

model Resume {
  id          String   @id @default(cuid())
  userId      String
  title       String?
  description String?
  photoUrl    String?
  colorHex    String   @default("#000000")
  borderStyle String   @default("squircle")
  summary     String?
  firstName   String?
  lastName    String?
  jobTitle    String?
  city        String?
  country     String?
  phone       String?
  email       String?
  skills      String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  workExperiences WorkExperience[]
  educations      Education[]
  projects        Project[]
  references      Reference[]

  @@map("resumes")
}

model WorkExperience {
  id          String    @id @default(cuid())
  position    String?
  company     String?
  startDate   DateTime?
  endDate     DateTime?
  description String?
  resumeId    String
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_experiences")
}

model Education {
  id        String    @id @default(cuid())
  degree    String?
  school    String?
  startDate DateTime?
  endDate   DateTime?
  resumeId  String
  resume    Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("educations")
}

model Project {
  id          String   @id @default(cuid())
  resumeId    String
  title       String?
  description String?
  githubUrl   String?
  demoUrl     String?
  techStack   String[]

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

model Reference {
  id       String  @id @default(cuid())
  resumeId String
  name     String?
  email    String?
  phone    String?
  company  String?
  position String?

  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("references")
}

model UserSubscription {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  stripeCustomerId        String   @unique
  stripeSubscriptionId    String   @unique
  stripePriceId           String   @unique
  stripeCurrentPeriodEnd  DateTime
  stripeCancelAtPeriodEnd Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_subscriptions")
}
